Abstract Classes

An abstract class is a class that cannot be instantiated directly. It serves as a blueprint for other classes, defining common properties and methods that derived classes must implement. Abstract classes can contain both abstract methods (methods declared without implementation) and concrete methods (methods with implementations).

When to Use:

To establish a common structure for related classes.
To enforce the implementation of specific methods in derived classes.
To provide default implementations for certain methods.
Example:

<!-- <?php

abstract class Animal {
    protected $name;

    public function __construct($name) {
        $this->name = $name;
    }

    public abstract function makeSound(); // Abstract method
}

class Dog extends Animal {
    public function makeSound() {
        echo "Woof!";
    }
}

class Cat extends Animal {
    public function makeSound() {
        echo "Meow!";
    }
}

$dog = new Dog("Buddy");

$cat = new Cat("Whiskers");

$dog->makeSound(); // Output: Woof!
$cat->makeSound(); // Output: Meow! -->

Interfaces

An interface defines a contract for a class to adhere to. It specifies a set of methods that a class must implement, without providing any implementations. Interfaces are used to establish a common interface for unrelated classes, promoting polymorphism and code reusability.

Significance:

Encapsulating behavior and providing a unified interface for different classes.
Enabling loose coupling between classes and promoting code maintainability.
Facilitating polymorphism by allowing objects of different types to be treated as the same interface.
Example:

<!-- <?php

interface Drawable {
    public function draw();
}

class Circle implements Drawable {
    public function draw() {
        echo "Drawing a circle...\n";
    }
}

class   
 Rectangle implements Drawable {
    public function draw() {
        echo "Drawing a rectangle...\n";
    }
}

function drawShapes(Drawable $shapes) {
    foreach ($shapes as $shape) {
        $shape->draw();
    }
}

$shapes = [new Circle(), new Rectangle()];
drawShapes($shapes); -->

Traits

A trait is a mechanism for grouping together methods that can be reused across multiple classes. Traits are similar to classes, but they cannot be instantiated directly. They are designed to provide a way to reuse code without creating inheritance hierarchies.

Differences from Classes and Interfaces:

Traits cannot be instantiated, unlike classes.
Traits can contain both properties and methods, while interfaces can only define methods.
Traits can be used multiple times in a class, unlike inheritance, which allows only one parent class.
Example:

<!-- <?php

trait Flyable {
    public function fly() {
        echo "Flying...\n";
    }
}

class Bird {
    use Flyable;
}

class Airplane {
    use Flyable;
}

$bird = new Bird();
$bird->fly(); // Output: Flying...

$airplane = new Airplane();
$airplane->fly(); // Output: Flying... -->

Static Properties and Methods

Static properties and methods belong to the class itself, rather than to individual instances of the class. They can be accessed without creating an object of the class.

Use Cases:

Storing class-wide data.
Providing utility methods that don't require instance-specific context.
Creating singleton patterns.
Example:

<!-- <?php

class Counter {
    public static $count = 0;

    public static function increment() {
        self::$count++;
    }

    public static function getCount() {
        return self::$count;
    }
}

Counter::increment();
Counter::increment();

echo Counter::getCount(); // Output: 2 -->

Namespaces

Namespaces are used to organize code and prevent naming conflicts between different parts of a large application. They create a hierarchical structure for classes, functions, and constants, making it easier to manage and reuse code.

Importance:

Preventing naming collisions between classes, functions, and constants.
Encouraging code organization and modularity.
Improving code readability and maintainability.
Example:

<!-- <?php

 namespace Geometry;

 class Shape {
     // ...
 }

 namespace Arithmetic;

 class Calculator {
     // ...
 }

 use Geometry\Shape;
 use Arithmetic\Calculator;

 $shape = new Shape();
 $calculator = new Calculator(); -->

 Iterables

 Iterables are objects that can be used in a foreach loop. They implement the Traversable interface, which means they have a getIterator() method that returns an iterator. Iterators provide a way to sequentially access the elements of an iterable object.

 Applications:

 Implementing custom data structures.
 Creating generators for efficient data generation.
 Integrating with built-in functions that work with iterables (e.g., array_map, array_filter).
 Example:

<!-- <?php

 class MyRange implements Iterator {
     private $start, $end, $current;

     public function __construct($start, $end) {
         $this->start = $start;
         $this->end = $end;
         $this->current = $start;
     }

     public function rewind() {
         $this->current = $this->start;
     }

     public function current() {
         return $this->current;
     }

     public function key() {
         return $this->current;
     }

     public function next() {
         $this->current++;
     }

     public function   
  valid() {
         return $this->current <= $this->end;   

     }
 }

 foreach (new MyRange(1, 5) as $num) {
     echo $num . "\n";
 } -->